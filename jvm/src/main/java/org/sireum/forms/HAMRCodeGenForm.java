package org.sireum.forms;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

@SuppressWarnings("unchecked")
public class HAMRCodeGenForm {
    public JPanel headerPanel;
    public JPanel transpilerPanel;
    public JPanel camkesPanel;
    public JLabel platformLabel;
    public JLabel outputDirectoryLabel;
    public JLabel slangBasePackageNameLabel;
    public JComboBox platform;
    public JTextField outputDir;
    public JTextField packageName;
    public JButton outputDirectoryButton;
    public JCheckBox runtimeMonitoring;
    public JCheckBox excludeComponentImpl;
    public JPanel transpilerInnerPanel;
    public JLabel transpilerBitWidthLabel;
    public JComboBox bitWidth;
    public JLabel transpilerMaxSeqSizeLabel;
    public JTextField maxArraySize;
    public JLabel transpilerMaxStringSizeLabel;
    public JTextField maxStringSize;
    public JLabel transpilerCOutputLabel;
    public JLabel transpilerAuxDirLabel;
    public JTextField slangOutputCDir;
    public JTextField slangAuxCodeDirs;
    public JButton transpilerCOutputBrowseButton;
    public JButton transpilerAuxBrowseButton;
    public JLabel camkesSeL4OutputLabel;
    public JLabel camkesAuxDirSeL4Label;
    public JTextField camkesAuxCodeDirs;
    public JTextField camkesOutputDir;
    public JButton camkesSeL4OutputBrowseButton;
    public JButton camkesAuxSeL4BrowseButton;
    public JPanel codegenPanel;
    public JPanel bottomPanel;
    public JButton okButton;
    public JButton cancelButton;
    public JTextField slangOutputDir;
    public JButton slangOutputDirectoryButton;
    public JTextField ros2OutputWorkspaceDir;
    public JButton ros2WorkspaceDirectoryButton;
    public JTextField ros2Dir;
    public JButton ros2Ros2DirectoryButton;
    public JCheckBox strictAadlMode;
    public JComboBox ros2NodesLanguage;
    public JComboBox ros2LaunchLanguage;
    public JLabel slangOutputDirectoryLabel;
    public JLabel ros2NodesLanguageLabel;
    public JLabel ros2LaunchLanguageLabel;
    public JLabel ros2WorkspaceDirectoryLabel;
    public JLabel ros2Ros2DirectoryLabel;
    public JPanel ros2OptionsPanel;
    public JPanel slangOptionsPanel;
    public JButton themeButton;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        codegenPanel = new JPanel();
        codegenPanel.setLayout(new GridLayoutManager(7, 1, new Insets(0, 0, 0, 0), -1, -1));
        headerPanel = new JPanel();
        headerPanel.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
        codegenPanel.add(headerPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        platformLabel = new JLabel();
        platformLabel.setText("Platform");
        headerPanel.add(platformLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        outputDirectoryLabel = new JLabel();
        outputDirectoryLabel.setText("Output Directory");
        headerPanel.add(outputDirectoryLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        platform = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("JVM");
        defaultComboBoxModel1.addElement("MacOS");
        defaultComboBoxModel1.addElement("Linux");
        defaultComboBoxModel1.addElement("Cygwin");
        defaultComboBoxModel1.addElement("seL4");
        defaultComboBoxModel1.addElement("seL4_Only");
        defaultComboBoxModel1.addElement("seL4_TB");
        defaultComboBoxModel1.addElement("ros2");
        platform.setModel(defaultComboBoxModel1);
        headerPanel.add(platform, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        outputDir = new JTextField();
        headerPanel.add(outputDir, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer1 = new Spacer();
        headerPanel.add(spacer1, new GridConstraints(0, 2, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        outputDirectoryButton = new JButton();
        outputDirectoryButton.setText("...");
        headerPanel.add(outputDirectoryButton, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        codegenPanel.add(spacer2, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        transpilerPanel = new JPanel();
        transpilerPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        codegenPanel.add(transpilerPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        transpilerPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Transpiler Options", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        excludeComponentImpl = new JCheckBox();
        excludeComponentImpl.setText("Exclude Slang Component Implementations");
        transpilerPanel.add(excludeComponentImpl, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        final Spacer spacer3 = new Spacer();
        transpilerPanel.add(spacer3, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        transpilerInnerPanel = new JPanel();
        transpilerInnerPanel.setLayout(new GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        transpilerPanel.add(transpilerInnerPanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        transpilerBitWidthLabel = new JLabel();
        transpilerBitWidthLabel.setText("BitWidth");
        transpilerInnerPanel.add(transpilerBitWidthLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        transpilerInnerPanel.add(spacer4, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        bitWidth = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("8");
        defaultComboBoxModel2.addElement("16");
        defaultComboBoxModel2.addElement("32");
        defaultComboBoxModel2.addElement("64");
        bitWidth.setModel(defaultComboBoxModel2);
        transpilerInnerPanel.add(bitWidth, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        transpilerMaxSeqSizeLabel = new JLabel();
        transpilerMaxSeqSizeLabel.setText("Max Sequence Size");
        transpilerInnerPanel.add(transpilerMaxSeqSizeLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        maxArraySize = new JTextField();
        maxArraySize.setText("16");
        transpilerInnerPanel.add(maxArraySize, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        transpilerMaxStringSizeLabel = new JLabel();
        transpilerMaxStringSizeLabel.setText("Max String Size");
        transpilerInnerPanel.add(transpilerMaxStringSizeLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        maxStringSize = new JTextField();
        maxStringSize.setText("256");
        transpilerInnerPanel.add(maxStringSize, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        transpilerCOutputLabel = new JLabel();
        transpilerCOutputLabel.setText("C Output Directory");
        transpilerInnerPanel.add(transpilerCOutputLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        transpilerAuxDirLabel = new JLabel();
        transpilerAuxDirLabel.setText("Aux Code Directory");
        transpilerInnerPanel.add(transpilerAuxDirLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        slangOutputCDir = new JTextField();
        transpilerInnerPanel.add(slangOutputCDir, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        slangAuxCodeDirs = new JTextField();
        transpilerInnerPanel.add(slangAuxCodeDirs, new GridConstraints(4, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        transpilerCOutputBrowseButton = new JButton();
        transpilerCOutputBrowseButton.setText("...");
        transpilerInnerPanel.add(transpilerCOutputBrowseButton, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        transpilerAuxBrowseButton = new JButton();
        transpilerAuxBrowseButton.setText("...");
        transpilerInnerPanel.add(transpilerAuxBrowseButton, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        camkesPanel = new JPanel();
        camkesPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        codegenPanel.add(camkesPanel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        camkesPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "CAmkES Options", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        camkesSeL4OutputLabel = new JLabel();
        camkesSeL4OutputLabel.setText("seL4/CAmkES Output Directory");
        camkesPanel.add(camkesSeL4OutputLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        camkesAuxDirSeL4Label = new JLabel();
        camkesAuxDirSeL4Label.setText("Aux Code Directory for CAmkES");
        camkesPanel.add(camkesAuxDirSeL4Label, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        camkesAuxCodeDirs = new JTextField();
        camkesPanel.add(camkesAuxCodeDirs, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        camkesOutputDir = new JTextField();
        camkesPanel.add(camkesOutputDir, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        camkesSeL4OutputBrowseButton = new JButton();
        camkesSeL4OutputBrowseButton.setText("...");
        camkesPanel.add(camkesSeL4OutputBrowseButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        camkesAuxSeL4BrowseButton = new JButton();
        camkesAuxSeL4BrowseButton.setText("...");
        camkesPanel.add(camkesAuxSeL4BrowseButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        codegenPanel.add(bottomPanel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        okButton = new JButton();
        okButton.setText("Insert");
        bottomPanel.add(okButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        bottomPanel.add(spacer5, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        bottomPanel.add(cancelButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        themeButton = new JButton();
        themeButton.setIcon(new ImageIcon(getClass().getResource("/icon/toggle.png")));
        themeButton.setText("");
        bottomPanel.add(themeButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ros2OptionsPanel = new JPanel();
        ros2OptionsPanel.setLayout(new GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        codegenPanel.add(ros2OptionsPanel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ros2OptionsPanel.setBorder(BorderFactory.createTitledBorder(null, "ROS2 Options", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        ros2WorkspaceDirectoryLabel = new JLabel();
        ros2WorkspaceDirectoryLabel.setText("Workspace Directory");
        ros2OptionsPanel.add(ros2WorkspaceDirectoryLabel, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ros2OutputWorkspaceDir = new JTextField();
        ros2OptionsPanel.add(ros2OutputWorkspaceDir, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        ros2WorkspaceDirectoryButton = new JButton();
        ros2WorkspaceDirectoryButton.setText("...");
        ros2OptionsPanel.add(ros2WorkspaceDirectoryButton, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ros2Ros2DirectoryLabel = new JLabel();
        ros2Ros2DirectoryLabel.setText("ROS2 Directory");
        ros2OptionsPanel.add(ros2Ros2DirectoryLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ros2Dir = new JTextField();
        ros2OptionsPanel.add(ros2Dir, new GridConstraints(4, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        ros2Ros2DirectoryButton = new JButton();
        ros2Ros2DirectoryButton.setText("...");
        ros2OptionsPanel.add(ros2Ros2DirectoryButton, new GridConstraints(4, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        strictAadlMode = new JCheckBox();
        strictAadlMode.setText("Strict AADL Mode");
        ros2OptionsPanel.add(strictAadlMode, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ros2NodesLanguageLabel = new JLabel();
        ros2NodesLanguageLabel.setText("Nodes Language");
        ros2OptionsPanel.add(ros2NodesLanguageLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ros2LaunchLanguageLabel = new JLabel();
        ros2LaunchLanguageLabel.setText("Launch Language");
        ros2OptionsPanel.add(ros2LaunchLanguageLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ros2LaunchLanguage = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        defaultComboBoxModel3.addElement("Python");
        defaultComboBoxModel3.addElement("Xml");
        ros2LaunchLanguage.setModel(defaultComboBoxModel3);
        ros2OptionsPanel.add(ros2LaunchLanguage, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        ros2OptionsPanel.add(spacer6, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        ros2NodesLanguage = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel4 = new DefaultComboBoxModel();
        defaultComboBoxModel4.addElement("Cpp");
        defaultComboBoxModel4.addElement("Python");
        ros2NodesLanguage.setModel(defaultComboBoxModel4);
        ros2OptionsPanel.add(ros2NodesLanguage, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        slangOptionsPanel = new JPanel();
        slangOptionsPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        codegenPanel.add(slangOptionsPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        slangOptionsPanel.setBorder(BorderFactory.createTitledBorder(null, "Slang Options", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        packageName = new JTextField();
        slangOptionsPanel.add(packageName, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        slangBasePackageNameLabel = new JLabel();
        slangBasePackageNameLabel.setText("Base Package Name");
        slangOptionsPanel.add(slangBasePackageNameLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        slangOutputDirectoryLabel = new JLabel();
        slangOutputDirectoryLabel.setText("Slang Output Directory");
        slangOptionsPanel.add(slangOutputDirectoryLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        slangOutputDir = new JTextField();
        slangOptionsPanel.add(slangOutputDir, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        slangOutputDirectoryButton = new JButton();
        slangOutputDirectoryButton.setText("...");
        slangOptionsPanel.add(slangOutputDirectoryButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        runtimeMonitoring = new JCheckBox();
        runtimeMonitoring.setText("Enable Runtime Monitoring");
        slangOptionsPanel.add(runtimeMonitoring, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return codegenPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
